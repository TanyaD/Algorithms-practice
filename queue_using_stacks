/**
 * Push element x to the back of queue.
 * @param {number} x
 * @return {void}
 */
MyQueue.prototype.push = function(x) {
  this.pushStack.push(x);
};

/**
 * Removes the element from in front of queue and returns that element.
 * @return {number}
 */
MyQueue.prototype.pop = function() {
  while (this.pushStack.length !== 0) {
    this.popStack.push(this.pushStack.pop());
  }
  let pop = this.popStack.pop();
  while (this.popStack.length !== 0) {
    this.pushStack.push(this.popStack.pop());
  }
  return pop;
};

/**
 * Get the front element.
 * @return {number}
 */
MyQueue.prototype.peek = function() {
  while (this.pushStack.length !== 0) {
    this.popStack.push(this.pushStack.pop());
  }
  let peek = this.popStack[this.popStack.length - 1];
  while (this.popStack.length !== 0) {
    this.pushStack.push(this.popStack.pop());
  }
  return peek;
};

/**
 * Returns whether the queue is empty.
 * @return {boolean}
 */
MyQueue.prototype.empty = function() {
  if (this.pushStack.length === 0) {
    return true;
  }
  return false;
};
